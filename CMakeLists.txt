cmake_minimum_required(VERSION 3.18)

project(tlRender LANGUAGES CXX)

# Build options
set(TLR_ENABLE_PYTHON FALSE CACHE BOOL "Enable Python support (for OTIO Python adapters)")
set(TLR_BUILD_GL TRUE CACHE BOOL "Build OpenGL library (tlRenderGL)")
set(TLR_BUILD_QT FALSE CACHE BOOL "Build Qt library (tlRenderQt)")
set(TLR_BUILD_EXAMPLES TRUE CACHE BOOL "Build examples")
set(TLR_BUILD_TESTS TRUE CACHE BOOL "Build tests")

# Configure
list(PREPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake/Modules)
if(TLR_ENABLE_PYTHON)
    add_definitions(-DTLR_ENABLE_PYTHON)
endif()
if(CMAKE_BUILD_TYPE MATCHES "^Debug$")
    add_definitions(-DTLR_ASSERT)
endif()
if(TLR_BUILD_TESTS)
    enable_testing()
endif()
include_directories(${PROJECT_SOURCE_DIR}/lib ${PROJECT_SOURCE_DIR}/etc)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

# Dependencies
find_package(Threads REQUIRED)
find_package(FSeq REQUIRED)
find_package(OTIO REQUIRED)
#find_package(RtAudio REQUIRED)
find_package(JPEG)
find_package(OpenEXR)
find_package(FFmpeg)
if(TLR_ENABLE_PYTHON)
    find_package(Python3 REQUIRED COMPONENTS Development)
endif()
if(TLR_BUILD_GL)
    find_package(OpenGL REQUIRED)
    find_package(FreeType REQUIRED)
    find_package(glad REQUIRED)
    if(TLR_BUILD_EXAMPLES)
        find_package(GLFW REQUIRED)
    endif()
endif()
if(TLR_BUILD_QT)
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)
    set(CMAKE_AUTOUIC ON)
    find_package(OpenGL REQUIRED)
    find_package(Qt5 COMPONENTS Widgets HINTS "$ENV{QTDIR}" REQUIRED)
endif()

# Sub-directories
add_subdirectory(lib)
add_subdirectory(bin)
if(TLR_BUILD_TESTS)
    add_subdirectory(tests)
endif()
