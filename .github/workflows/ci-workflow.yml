name: CI

on: [push]

jobs:
  linux-build:
    runs-on: ubuntu-latest

    env:
      TLRENDER_ENABLE_MMAP: ON
      TLRENDER_ENABLE_COVERAGE: ON
      TLRENDER_ENABLE_PYTHON: OFF
      TLRENDER_BUILD_GL: ON
      TLRENDER_BUILD_QT5: ON
      TLRENDER_BUILD_APPS: ON
      TLRENDER_BUILD_EXAMPLES: ON
      TLRENDER_BUILD_TESTS: ON
      TLRENDER_BUILD_FFmpeg: ON
      TLRENDER_BUILD_JPEG: ON
      TLRENDER_BUILD_PNG: ON
      TLRENDER_BUILD_OpenEXR: ON
      TLRENDER_BUILD_TIFF: ON

    steps:
    - uses: actions/checkout@v2

    - name: Update
      run: sudo apt-get update

    - name: Install lcov
      if: env.TLRENDER_ENABLE_COVERAGE == 'ON'
      run: sudo apt-get install lcov

    - name: Install OpenGL dev
      if: env.TLRENDER_BUILD_GL == 'ON'
      run: sudo apt-get install xorg-dev libglu1-mesa-dev mesa-common-dev

    - name: Install ALSA dev
      run: sudo apt-get install libasound2-dev

    - name: Install PulseAudio dev
      run: sudo apt-get install libpulse-dev

    - name: Install Python dev
      if: env.TLRENDER_ENABLE_PYTHON == 'ON'
      run: sudo apt-get install python3.8-dev
      
    - name: Install Qt dev
      if: env.TLRENDER_BUILD_QT5 == 'ON'
      run: sudo apt-get install qt5-default qtdeclarative5-dev libqt5quick5 qtbase5-dev libqt5svg5-dev

    - name: Setup environment
      run: >
        echo "$PWD/build/install/bin" >> $GITHUB_PATH &&
        echo "LD_LIBRARY_PATH=$PWD/build/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV &&
        echo "PYTHONPATH=$PWD/build/install/lib:$PYTHONPATH" >> $GITHUB_ENV

    - name: Build tlRender
      run: >
        mkdir build &&
        cd build &&
        cmake ../etc/SuperBuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX=$PWD/install \
          -DCMAKE_PREFIX_PATH=$PWD/install \
          -DTLRENDER_ENABLE_MMAP=$TLRENDER_ENABLE_MMAP \
          -DTLRENDER_ENABLE_COVERAGE=$TLRENDER_ENABLE_COVERAGE \
          -DTLRENDER_ENABLE_PYTHON=$TLRENDER_ENABLE_PYTHON \
          -DTLRENDER_BUILD_GL=$TLRENDER_BUILD_GL \
          -DTLRENDER_BUILD_QT5=$TLRENDER_BUILD_QT5 \
          -DTLRENDER_BUILD_APPS=$TLRENDER_BUILD_APPS \
          -DTLRENDER_BUILD_EXAMPLES=$TLRENDER_BUILD_EXAMPLES \
          -DTLRENDER_BUILD_TESTS=$TLRENDER_BUILD_TESTS \
          -DTLRENDER_BUILD_FFmpeg=$TLRENDER_BUILD_FFmpeg \
          -DTLRENDER_BUILD_JPEG=$TLRENDER_BUILD_JPEG \
          -DTLRENDER_BUILD_PNG=$TLRENDER_BUILD_PNG \
          -DTLRENDER_BUILD_OpenEXR=$TLRENDER_BUILD_OpenEXR \
          -DTLRENDER_BUILD_TIFF=$TLRENDER_BUILD_TIFF &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        cd build &&
        cd tlRender/src/tlRender-build &&
        ctest --rerun-failed --output-on-failure
    
    - name: Code coverage
      if: env.TLRENDER_ENABLE_COVERAGE == 'ON'
      run: >
        cd build &&
        cd tlRender/src/tlRender-build &&
        sh ../../../../etc/Linux/lcov.sh

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2.1.0
      with:
        files: ${{ github.workspace }}/build/tlRender/src/tlRender-build/coverage_filtered.info
        fail_ci_if_error: true

  macos-build:
    runs-on: macos-latest

    env:
      TLRENDER_ENABLE_MMAP: ON
      TLRENDER_ENABLE_COVERAGE: OFF
      TLRENDER_ENABLE_PYTHON: OFF
      TLRENDER_BUILD_GL: OFF
      TLRENDER_BUILD_QT5: OFF
      TLRENDER_BUILD_APPS: OFF
      TLRENDER_BUILD_EXAMPLES: OFF
      TLRENDER_BUILD_TESTS: ON
      TLRENDER_BUILD_FFmpeg: ON
      TLRENDER_BUILD_JPEG: ON
      TLRENDER_BUILD_PNG: ON
      TLRENDER_BUILD_OpenEXR: OFF
      TLRENDER_BUILD_TIFF: OFF

    steps:
    - uses: actions/checkout@v2

    # \bug DYLD_LIBRARY_PATH is not being set here?
    - name: Setup environment
      run: >
        echo "$PWD/build/install/bin" >> $GITHUB_PATH &&
        echo "DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV &&
        echo "PYTHONPATH=$PWD/build/install/lib:$PYTHONPATH" >> $GITHUB_ENV

    - name: Build tlRender
      run: >
        export DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH &&
        mkdir build &&
        cd build &&
        cmake ../etc/SuperBuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX=$PWD/install \
          -DCMAKE_PREFIX_PATH=$PWD/install \
          -DTLRENDER_ENABLE_MMAP=$TLRENDER_ENABLE_MMAP \
          -DTLRENDER_ENABLE_COVERAGE=$TLRENDER_ENABLE_COVERAGE \
          -DTLRENDER_ENABLE_PYTHON=$TLRENDER_ENABLE_PYTHON \
          -DTLRENDER_BUILD_GL=$TLRENDER_BUILD_GL \
          -DTLRENDER_BUILD_QT5=$TLRENDER_BUILD_QT5 \
          -DTLRENDER_BUILD_APPS=$TLRENDER_BUILD_APPS \
          -DTLRENDER_BUILD_EXAMPLES=$TLRENDER_BUILD_EXAMPLES \
          -DTLRENDER_BUILD_TESTS=$TLRENDER_BUILD_TESTS \
          -DTLRENDER_BUILD_FFmpeg=$TLRENDER_BUILD_FFmpeg \
          -DTLRENDER_BUILD_JPEG=$TLRENDER_BUILD_JPEG \
          -DTLRENDER_BUILD_PNG=$TLRENDER_BUILD_PNG \
          -DTLRENDER_BUILD_OpenEXR=$TLRENDER_BUILD_OpenEXR \
          -DTLRENDER_BUILD_TIFF=$TLRENDER_BUILD_TIFF &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        export DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH &&
        cd build &&
        cd tlRender/src/tlRender-build &&
        tests/tltest/tltest

  windows-build:
    runs-on: windows-latest

    env:
      TLRENDER_ENABLE_MMAP: ON
      TLRENDER_ENABLE_COVERAGE: OFF
      TLRENDER_ENABLE_PYTHON: OFF
      TLRENDER_BUILD_GL: ON
      TLRENDER_BUILD_QT5: OFF
      TLRENDER_BUILD_APPS: ON
      TLRENDER_BUILD_EXAMPLES: ON
      TLRENDER_BUILD_TESTS: ON
      TLRENDER_BUILD_FFmpeg: OFF
      TLRENDER_BUILD_JPEG: ON
      TLRENDER_BUILD_PNG: ON
      TLRENDER_BUILD_OpenEXR: ON
      TLRENDER_BUILD_TIFF: ON

    steps:
    - uses: actions/checkout@v2

    - name: Setup environment
      run: >
        echo "$pwd\build\install\bin;$pwd\build\install\lib;$env:path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        
    - name: Build tlRender
      run: >
        mkdir build &&
        cd build &&
        cmake ..\etc\SuperBuild `
          -DCMAKE_BUILD_TYPE=Debug `
          -DCMAKE_INSTALL_PREFIX=install `
          -DCMAKE_PREFIX_PATH=install `
          -DTLRENDER_ENABLE_MMAP=${{ env.TLRENDER_ENABLE_MMAP }} `
          -DTLRENDER_ENABLE_COVERAGE=${{ env.TLRENDER_ENABLE_COVERAGE }} `
          -DTLRENDER_ENABLE_PYTHON=${{ env.TLRENDER_ENABLE_PYTHON }} `
          -DTLRENDER_BUILD_GL=${{ env.TLRENDER_BUILD_GL }} `
          -DTLRENDER_BUILD_QT5=${{ env.TLRENDER_BUILD_QT5 }} `
          -DTLRENDER_BUILD_APPS=${{ env.TLRENDER_BUILD_APPS }} `
          -DTLRENDER_BUILD_EXAMPLES=${{ env.TLRENDER_BUILD_EXAMPLES }} `
          -DTLRENDER_BUILD_TESTS=${{ env.TLRENDER_BUILD_TESTS }} `
          -DTLRENDER_BUILD_FFmpeg=${{ env.TLRENDER_BUILD_FFmpeg }} `
          -DTLRENDER_BUILD_JPEG=${{ env.TLRENDER_BUILD_JPEG }} `
          -DTLRENDER_BUILD_PNG=${{ env.TLRENDER_BUILD_PNG }} `
          -DTLRENDER_BUILD_OpenEXR=${{ env.TLRENDER_BUILD_OpenEXR }} `
          -DTLRENDER_BUILD_TIFF=${{ env.TLRENDER_BUILD_TIFF }} &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        cd build &&
        cd tlRender\src\tlRender-build &&
        ctest --rerun-failed --output-on-failure
