name: CI

on: [push]

jobs:
  linux-build:
    runs-on: ubuntu-latest

    env:
      FEATHER_TK_API: GL_4_1
      TLRENDER_NET: OFF
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_STB: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_FFMPEG_MINIMAL: OFF
      TLRENDER_USD: OFF
      TLRENDER_QT6: ON
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: ON
      TLRENDER_TESTS: ON
      TLRENDER_GCOV: ON

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup environment
      run: |
        cd ..
        echo "$PWD/install-Debug/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$PWD/install-Debug/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$PWD/install-Debug/lib:$PYTHONPATH" >> $GITHUB_ENV
        cmake --version
        python --version

    - name: Build tlRender
      run: |
        cd ..
        bash tlRender/etc/Linux/linux-build-gha.sh Debug

    - name: Run tests
      run: |
        cd ..
        xvfb-run build-Debug/tests/tltest/tltest
    
    - name: Code coverage
      if: env.TLRENDER_GCOV == 'ON'
      run: |
        cd ../build-Debug
        bash ../tlRender/etc/Linux/lcov.sh

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ${{ github.workspace }}/../build-Debug/coverage_filtered.info
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  linux-minimal-build:
    runs-on: ubuntu-latest

    env:
      FEATHER_TK_API: GL_4_1
      TLRENDER_NET: OFF
      TLRENDER_OCIO: OFF
      TLRENDER_AUDIO: OFF
      TLRENDER_JPEG: OFF
      TLRENDER_TIFF: OFF
      TLRENDER_STB: OFF
      TLRENDER_PNG: ON
      TLRENDER_EXR: OFF
      TLRENDER_FFMPEG: OFF
      TLRENDER_FFMPEG_MINIMAL: OFF
      TLRENDER_USD: OFF
      TLRENDER_QT6: OFF
      TLRENDER_QT5: OFF
      TLRENDER_TESTS: ON

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup environment
      run: |
        cd ..
        echo "$PWD/install-Debug/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$PWD/install-Debug/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$PWD/install-Debug/lib:$PYTHONPATH" >> $GITHUB_ENV
        cmake --version
        python --version

    - name: Build tlRender
      run: |
        cd ..
        bash tlRender/etc/Linux/linux-build-gha.sh Debug

    - name: Run tests
      run: |
        cd ..
        xvfb-run build-Debug/tests/tltest/tltest

  linux-gles2-minimal-build:
    runs-on: ubuntu-latest

    env:
      FEATHER_TK_API: GLES_2
      TLRENDER_NET: OFF
      TLRENDER_OCIO: OFF
      TLRENDER_AUDIO: OFF
      TLRENDER_JPEG: OFF
      TLRENDER_TIFF: OFF
      TLRENDER_STB: OFF
      TLRENDER_PNG: ON
      TLRENDER_EXR: OFF
      TLRENDER_FFMPEG: OFF
      TLRENDER_FFMPEG_MINIMAL: OFF
      TLRENDER_USD: OFF
      TLRENDER_QT6: OFF
      TLRENDER_QT5: OFF
      TLRENDER_TESTS: ON

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup environment
      run: |
        cd ..
        echo "$PWD/install-Debug/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$PWD/install-Debug/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$PWD/install-Debug/lib:$PYTHONPATH" >> $GITHUB_ENV
        cmake --version
        python --version

    - name: Build tlRender
      run: |
        cd ..
        bash tlRender/etc/Linux/linux-build-gha.sh Debug

    - name: Run tests
      run: |
        cd ..
        xvfb-run build-Debug/tests/tltest/tltest

  linux-package:
    runs-on: ubuntu-latest

    env:
      FEATHER_TK_API: GL_4_1
      TLRENDER_NET: ON
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_STB: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_FFMPEG_MINIMAL: ON
      TLRENDER_USD: ON
      TLRENDER_QT6: ON
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: OFF
      TLRENDER_TESTS: OFF

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Setup environment
      run: |
        cd ..
        echo "$PWD/install-Release/bin" >> $GITHUB_PATH
        echo "LD_LIBRARY_PATH=$PWD/install-Release/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$PWD/install-Release/lib:$PYTHONPATH" >> $GITHUB_ENV
        cmake --version
        python --version

    - name: Build tlRender
      run: |
        cd ..
        bash tlRender/etc/Linux/linux-build-gha.sh Release

    - name: Package
      run: |
        cd ..
        cmake --build build-Release -j 4 --target package

    - uses: actions/upload-artifact@v4
      with:
        name: tlRender-Linux-Packages
        path: ../build-Release/tlRender-*.tar.gz

  macos-13-build:
    runs-on: macos-13

    env:
      FEATHER_TK_API: GL_4_1
      TLRENDER_NET: OFF
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_STB: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_FFMPEG_MINIMAL: OFF
      TLRENDER_USD: OFF
      TLRENDER_QT6: OFF
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: ON
      TLRENDER_TESTS: ON
      TLRENDER_GCOV: OFF
      CMAKE_OSX_DEPLOYMENT_TARGET: 10.15
      CMAKE_OSX_ARCHITECTURES: x86_64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # \bug DYLD_LIBRARY_PATH is not being set here?
    - name: Setup environment
      run: |
        cd ..
        echo "$PWD/install-Debug/bin" >> $GITHUB_PATH
        echo "DYLD_LIBRARY_PATH=$PWD/install-Debug/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$PWD/install-Debug/lib:$PYTHONPATH" >> $GITHUB_ENV
        cmake --version
        python --version

    - name: Build tlRender
      run: |
        cd ..
        export DYLD_LIBRARY_PATH=$PWD/install-Debug/lib:$DYLD_LIBRARY_PATH
        bash tlRender/etc/macOS/macos-build-gha.sh Debug

    - name: Run tests
      run: |
        cd ..
        export DYLD_LIBRARY_PATH=$PWD/install-Debug/lib:$DYLD_LIBRARY_PATH
        build-Debug/tests/tltest/tltest

  macos-build:
    runs-on: macos-latest

    env:
      FEATHER_TK_API: GL_4_1
      TLRENDER_NET: OFF
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_STB: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_FFMPEG_MINIMAL: OFF
      TLRENDER_USD: OFF
      TLRENDER_QT6: OFF
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: ON
      TLRENDER_TESTS: ON
      TLRENDER_GCOV: OFF
      CMAKE_OSX_DEPLOYMENT_TARGET: 14
      CMAKE_OSX_ARCHITECTURES: arm64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # \bug DYLD_LIBRARY_PATH is not being set here?
    - name: Setup environment
      run: |
        cd ..
        echo "$PWD/install-Debug/bin" >> $GITHUB_PATH
        echo "DYLD_LIBRARY_PATH=$PWD/install-Debug/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$PWD/install-Debug/lib:$PYTHONPATH" >> $GITHUB_ENV
        cmake --version
        python --version

    - name: Build tlRender
      run: |
        cd ..
        export DYLD_LIBRARY_PATH=$PWD/install-Debug/lib:$DYLD_LIBRARY_PATH
        bash tlRender/etc/macOS/macos-build-gha.sh Debug

    - name: Run tests
      run: |
        cd ..
        export DYLD_LIBRARY_PATH=$PWD/install-Debug/lib:$DYLD_LIBRARY_PATH
        build-Debug/tests/tltest/tltest

  macos-package:
    runs-on: macos-latest

    env:
      FEATHER_TK_API: GL_4_1
      TLRENDER_NET: ON
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_STB: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_FFMPEG_MINIMAL: ON
      TLRENDER_USD: ON
      TLRENDER_QT6: OFF
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: OFF
      TLRENDER_TESTS: OFF
      CMAKE_OSX_DEPLOYMENT_TARGET: 10.15

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # \bug DYLD_LIBRARY_PATH is not being set here?
    - name: Setup environment
      run: |
        cd ..
        echo "$PWD/install-Release/bin" >> $GITHUB_PATH
        echo "DYLD_LIBRARY_PATH=$PWD/install-Release/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$PWD/install-Release/lib:$PYTHONPATH" >> $GITHUB_ENV
        cmake --version
        python --version

    - name: Build tlRender
      run: |
        cd ..
        export DYLD_LIBRARY_PATH=$PWD/install-Release/lib:$DYLD_LIBRARY_PATH
        bash tlRender/etc/macOS/macos-build-gha.sh Release

    - name: Package
      run: |
        cd ..
        cmake --build build-Release -j 4 --target package

    - uses: actions/upload-artifact@v4
      with:
        name: tlRender-macOS-Packages
        path: ../build-Release/tlRender-*.dmg

  windows-build:
    runs-on: windows-latest

    env:
      FEATHER_TK_API: GL_4_1
      TLRENDER_NET: OFF
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_STB: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_FFMPEG_MINIMAL: OFF
      TLRENDER_USD: OFF
      TLRENDER_QT6: OFF
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: ON
      TLRENDER_TESTS: ON

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - uses: ilammy/setup-nasm@v1

    # \bug Any spaces before the ">>" will be considered part of the path.
    - name: Setup environment
      shell: cmd
      run: |
        cd ..
        echo %CD%\install-Debug\bin>> %GITHUB_PATH%
        echo %CD%\install-Debug\lib>> %GITHUB_PATH%
        echo CTEST_OUTPUT_ON_FAILURE=1 >> %GITHUB_ENV%
        cmake --version
        python --version
        
    - name: Build tlRender
      shell: cmd
      run: |
        cd ..
        tlRender\etc\Windows\windows-build-gha.bat Debug

    - name: Run tests
      shell: cmd
      run: |
        cd ..
        build-Debug\tests\tltest\Debug\tltest

  windows-package:
    runs-on: windows-latest
    #runs-on: windows-2019

    env:
      FEATHER_TK_API: GL_4_1
      TLRENDER_NET: ON
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_STB: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_FFMPEG_MINIMAL: ON
      TLRENDER_USD: ON
      TLRENDER_QT6: OFF
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: OFF
      TLRENDER_TESTS: OFF

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - uses: ilammy/setup-nasm@v1

    # \bug Any spaces before the ">>" will be considered part of the path.
    - name: Setup environment
      shell: cmd
      run: |
        cd ..
        echo %CD%\build-Release\bin>> %GITHUB_PATH%
        echo %CD%\build-Release\lib>> %GITHUB_PATH%
        echo CTEST_OUTPUT_ON_FAILURE=1 >> %GITHUB_ENV%
        cmake --version
        python --version

    - name: Build tlRender
      shell: cmd
      run: |
        cd ..
        tlRender\etc\Windows\windows-build-gha.bat Release

    - name: Package
      shell: cmd
      run: |
        cd ..
        cmake --build build-Release -j 4 --target package

    - uses: actions/upload-artifact@v4
      with:
        name: tlRender-Windows-Packages
        path: ..\build-Release\tlRender-*.zip
