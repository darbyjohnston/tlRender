name: CI

on: [push]

jobs:
  linux-build:
    runs-on: ubuntu-latest

    env:
      TLRENDER_MMAP: ON
      TLRENDER_PYTHON: OFF
      TLRENDER_GLFW: ON
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_NFD: OFF
      TLRENDER_QT5: ON
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: ON
      TLRENDER_TESTS: ON
      TLRENDER_GCOV: ON

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Update
      run: sudo apt-get update

    - name: Install lcov
      if: env.TLRENDER_GCOV == 'ON'
      run: sudo apt-get install lcov

    - name: Install OpenGL dev
      run: sudo apt-get install xorg-dev libglu1-mesa-dev mesa-common-dev

    - name: Install ALSA dev
      run: sudo apt-get install libasound2-dev

    - name: Install PulseAudio dev
      run: sudo apt-get install libpulse-dev

    - name: Install Python dev
      if: env.TLRENDER_PYTHON == 'ON'
      run: sudo apt-get install python3.8-dev
      
    - name: Install GTK dev
      if: env.TLRENDER_NFD == 'ON'
      run: sudo apt-get install libgtk-3-dev

    - name: Install Qt dev
      if: env.TLRENDER_QT5 == 'ON'
      run: sudo apt-get install qtdeclarative5-dev libqt5quick5 qtbase5-dev libqt5svg5-dev qtchooser qt5-qmake qtbase5-dev-tools

    - name: Setup environment
      run: >
        echo "$PWD/build/install/bin" >> $GITHUB_PATH &&
        echo "LD_LIBRARY_PATH=$PWD/build/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV &&
        echo "PYTHONPATH=$PWD/build/install/lib:$PYTHONPATH" >> $GITHUB_ENV

    - name: Build tlRender
      run: >
        mkdir build &&
        cd build &&
        cmake ../etc/SuperBuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX=$PWD/install \
          -DCMAKE_PREFIX_PATH=$PWD/install \
          -DTLRENDER_MMAP=$TLRENDER_MMAP \
          -DTLRENDER_PYTHON=$TLRENDER_PYTHON \
          -DTLRENDER_GLFW=$TLRENDER_GLFW \
          -DTLRENDER_OCIO=$TLRENDER_OCIO \
          -DTLRENDER_AUDIO=$TLRENDER_AUDIO \
          -DTLRENDER_JPEG=$TLRENDER_JPEG \
          -DTLRENDER_TIFF=$TLRENDER_TIFF \
          -DTLRENDER_PNG=$TLRENDER_PNG \
          -DTLRENDER_EXR=$TLRENDER_EXR \
          -DTLRENDER_FFMPEG=$TLRENDER_FFMPEG \
          -DTLRENDER_NFD=$TLRENDER_NFD \
          -DTLRENDER_QT5=$TLRENDER_QT5 \
          -DTLRENDER_PROGRAMS=$TLRENDER_PROGRAMS \
          -DTLRENDER_EXAMPLES=$TLRENDER_EXAMPLES \
          -DTLRENDER_TESTS=$TLRENDER_TESTS \
          -DTLRENDER_GCOV=$TLRENDER_GCOV &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        cd build &&
        cd tlRender/src/tlRender-build &&
        ctest --rerun-failed --output-on-failure
    
    - name: Code coverage
      if: env.TLRENDER_GCOV == 'ON'
      run: >
        cd build &&
        cd tlRender/src/tlRender-build &&
        sh ../../../../etc/Linux/lcov.sh

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ${{ github.workspace }}/build/tlRender/src/tlRender-build/coverage_filtered.info
        fail_ci_if_error: true

  linux-minimal-build:
    runs-on: ubuntu-latest

    env:
      TLRENDER_MMAP: OFF
      TLRENDER_PYTHON: OFF
      TLRENDER_GLFW: OFF
      TLRENDER_OCIO: OFF
      TLRENDER_AUDIO: OFF
      TLRENDER_JPEG: OFF
      TLRENDER_TIFF: OFF
      TLRENDER_PNG: OFF
      TLRENDER_EXR: OFF
      TLRENDER_FFMPEG: OFF
      TLRENDER_NFD: OFF
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: ON
      TLRENDER_TESTS: ON
      TLRENDER_GCOV: OFF

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Update
      run: sudo apt-get update

    - name: Install OpenGL dev
      run: sudo apt-get install xorg-dev libglu1-mesa-dev mesa-common-dev
      
    - name: Setup environment
      run: >
        echo "$PWD/build/install/bin" >> $GITHUB_PATH &&
        echo "LD_LIBRARY_PATH=$PWD/build/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV &&
        echo "PYTHONPATH=$PWD/build/install/lib:$PYTHONPATH" >> $GITHUB_ENV

    - name: Build tlRender
      run: >
        mkdir build &&
        cd build &&
        cmake ../etc/SuperBuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX=$PWD/install \
          -DCMAKE_PREFIX_PATH=$PWD/install \
          -DTLRENDER_MMAP=$TLRENDER_MMAP \
          -DTLRENDER_PYTHON=$TLRENDER_PYTHON \
          -DTLRENDER_GLFW=$TLRENDER_GLFW \
          -DTLRENDER_OCIO=$TLRENDER_OCIO \
          -DTLRENDER_AUDIO=$TLRENDER_AUDIO \
          -DTLRENDER_JPEG=$TLRENDER_JPEG \
          -DTLRENDER_TIFF=$TLRENDER_TIFF \
          -DTLRENDER_PNG=$TLRENDER_PNG \
          -DTLRENDER_EXR=$TLRENDER_EXR \
          -DTLRENDER_FFMPEG=$TLRENDER_FFMPEG \
          -DTLRENDER_NFD=$TLRENDER_NFD \
          -DTLRENDER_QT5=$TLRENDER_QT5 \
          -DTLRENDER_PROGRAMS=$TLRENDER_PROGRAMS \
          -DTLRENDER_EXAMPLES=$TLRENDER_EXAMPLES \
          -DTLRENDER_TESTS=$TLRENDER_TESTS \
          -DTLRENDER_GCOV=$TLRENDER_GCOV &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        cd build &&
        cd tlRender/src/tlRender-build &&
        ctest --rerun-failed --output-on-failure

  macos-build:
    runs-on: macos-latest

    env:
      TLRENDER_MMAP: ON
      TLRENDER_PYTHON: OFF
      TLRENDER_GLFW: ON
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: ON
      TLRENDER_NFD: OFF
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: ON
      TLRENDER_TESTS: ON
      TLRENDER_GCOV: OFF

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    # \bug DYLD_LIBRARY_PATH is not being set here?
    - name: Setup environment
      run: >
        echo "$PWD/build/install/bin" >> $GITHUB_PATH &&
        echo "DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV &&
        echo "PYTHONPATH=$PWD/build/install/lib:$PYTHONPATH" >> $GITHUB_ENV

    - name: Build tlRender
      run: >
        export DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH &&
        mkdir build &&
        cd build &&
        cmake ../etc/SuperBuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX=$PWD/install \
          -DCMAKE_PREFIX_PATH=$PWD/install \
          -DTLRENDER_MMAP=$TLRENDER_MMAP \
          -DTLRENDER_PYTHON=$TLRENDER_PYTHON \
          -DTLRENDER_GLFW=$TLRENDER_GLFW \
          -DTLRENDER_OCIO=$TLRENDER_OCIO \
          -DTLRENDER_AUDIO=$TLRENDER_AUDIO \
          -DTLRENDER_JPEG=$TLRENDER_JPEG \
          -DTLRENDER_TIFF=$TLRENDER_TIFF \
          -DTLRENDER_PNG=$TLRENDER_PNG \
          -DTLRENDER_EXR=$TLRENDER_EXR \
          -DTLRENDER_FFMPEG=$TLRENDER_FFMPEG \
          -DTLRENDER_NFD=$TLRENDER_NFD \
          -DTLRENDER_QT5=$TLRENDER_QT5 \
          -DTLRENDER_PROGRAMS=$TLRENDER_PROGRAMS \
          -DTLRENDER_EXAMPLES=$TLRENDER_EXAMPLES \
          -DTLRENDER_TESTS=$TLRENDER_TESTS \
          -DTLRENDER_GCOV=$TLRENDER_GCOV &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        export DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH &&
        cd build &&
        cd tlRender/src/tlRender-build &&
        tests/tltest/tltest

  windows-build:
    runs-on: windows-latest

    env:
      TLRENDER_MMAP: ON
      TLRENDER_PYTHON: OFF
      TLRENDER_GLFW: ON
      TLRENDER_OCIO: ON
      TLRENDER_AUDIO: ON
      TLRENDER_JPEG: ON
      TLRENDER_TIFF: ON
      TLRENDER_PNG: ON
      TLRENDER_EXR: ON
      TLRENDER_FFMPEG: OFF
      TLRENDER_NFD: OFF
      TLRENDER_QT5: OFF
      TLRENDER_PROGRAMS: ON
      TLRENDER_EXAMPLES: ON
      TLRENDER_TESTS: ON
      TLRENDER_GCOV: OFF

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Setup environment
      run: >
        echo "$pwd\build\install\bin;$pwd\build\install\lib;$env:path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        
    - name: Build tlRender
      run: >
        mkdir build &&
        cd build &&
        cmake ..\etc\SuperBuild `
          -DCMAKE_BUILD_TYPE=Debug `
          -DCMAKE_INSTALL_PREFIX=install `
          -DCMAKE_PREFIX_PATH=install `
          -DTLRENDER_MMAP=${{ env.TLRENDER_MMAP }} `
          -DTLRENDER_PYTHON=${{ env.TLRENDER_PYTHON }} `
          -DTLRENDER_GLFW=${{ env.TLRENDER_GLFW }} `
          -DTLRENDER_OCIO=${{ env.TLRENDER_OCIO }} `
          -DTLRENDER_AUDIO=${{ env.TLRENDER_AUDIO }} `
          -DTLRENDER_JPEG=${{ env.TLRENDER_JPEG }} `
          -DTLRENDER_TIFF=${{ env.TLRENDER_TIFF }} `
          -DTLRENDER_PNG=${{ env.TLRENDER_PNG }} `
          -DTLRENDER_EXR=${{ env.TLRENDER_EXR }} `
          -DTLRENDER_FFMPEG=${{ env.TLRENDER_FFMPEG }} `
          -DTLRENDER_NFD=${{ env.TLRENDER_NFD }} `
          -DTLRENDER_QT5=${{ env.TLRENDER_QT5 }} `
          -DTLRENDER_PROGRAMS=${{ env.TLRENDER_PROGRAMS }} `
          -DTLRENDER_EXAMPLES=${{ env.TLRENDER_EXAMPLES }} `
          -DTLRENDER_TESTS=${{ env.TLRENDER_TESTS }} `
          -DTLRENDER_GCOV=${{ env.TLRENDER_GCOV }} &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        cd build &&
        cd tlRender\src\tlRender-build &&
        ctest --rerun-failed --output-on-failure
