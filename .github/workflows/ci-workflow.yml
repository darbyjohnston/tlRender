name: CI

on: [push]

jobs:
  linux-build:
    runs-on: ubuntu-latest

    env:
      TLR_ENABLE_MMAP: ON
      TLR_ENABLE_COVERAGE: ON
      TLR_ENABLE_PYTHON: OFF
      TLR_BUILD_GL: OFF
      TLR_BUILD_QT: OFF
      TLR_BUILD_APPS: OFF
      TLR_BUILD_EXAMPLES: OFF
      TLR_BUILD_TESTS: ON
      TLR_BUILD_FFmpeg: OFF
      TLR_BUILD_JPEG: OFF
      TLR_BUILD_PNG: OFF
      TLR_BUILD_OpenEXR: OFF
      TLR_BUILD_TIFF: OFF

    steps:
    - uses: actions/checkout@v2

    - name: Update
      run: sudo apt-get update

    - name: Install lcov
      run: sudo apt-get install lcov

    - name: Install OpenGL dev
      run: sudo apt-get install xorg-dev libglu1-mesa-dev mesa-common-dev

    - name: Install ALSA dev
      run: sudo apt-get install libasound2-dev

    - name: Install PulseAudio dev
      run: sudo apt-get install libpulse-dev

    - name: Install Python dev
      run: sudo apt-get install python3.8-dev
      
    - name: Install Qt dev
      run: sudo apt-get install qt5-default qtdeclarative5-dev libqt5quick5 qtbase5-dev libqt5svg5-dev

    - name: Setup environment
      run: >
        echo "$PWD/build/install/bin" >> $GITHUB_PATH &&
        echo "LD_LIBRARY_PATH=$PWD/build/install/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV &&
        echo "PYTHONPATH=$PWD/build/install/lib:$PYTHONPATH" >> $GITHUB_ENV

    - name: Build tlRender
      run: >
        mkdir build &&
        cd build &&
        cmake ../etc/SuperBuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX=$PWD/install \
          -DCMAKE_PREFIX_PATH=$PWD/install \
          -DTLR_ENABLE_MMAP=$TLR_ENABLE_MMAP \
          -DTLR_ENABLE_COVERAGE=$TLR_ENABLE_COVERAGE \
          -DTLR_ENABLE_PYTHON=$TLR_ENABLE_PYTHON \
          -DTLR_BUILD_GL=$TLR_BUILD_GL \
          -DTLR_BUILD_QT=$TLR_BUILD_QT \
          -DTLR_BUILD_APPS=$TLR_BUILD_APPS \
          -DTLR_BUILD_EXAMPLES=$TLR_BUILD_EXAMPLES \
          -DTLR_BUILD_TESTS=$TLR_BUILD_TESTS \
          -DTLR_BUILD_FFmpeg=$TLR_BUILD_FFmpeg \
          -DTLR_BUILD_JPEG=$TLR_BUILD_JPEG \
          -DTLR_BUILD_PNG=$TLR_BUILD_PNG \
          -DTLR_BUILD_OpenEXR=$TLR_BUILD_OpenEXR \
          -DTLR_BUILD_TIFF=$TLR_BUILD_TIFF &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        cd build &&
        cd tlRender/src/tlRender-build &&
        ctest --rerun-failed --output-on-failure
    
    - name: Code coverage
      run: >
        cd build &&
        cd tlRender/src/tlRender-build &&
        sh ../../../../etc/Linux/lcov.sh

  macos-build:
    runs-on: macos-latest

    env:
      TLR_ENABLE_MMAP: ON
      TLR_ENABLE_COVERAGE: OFF
      TLR_ENABLE_PYTHON: OFF
      TLR_BUILD_GL: OFF
      TLR_BUILD_QT: OFF
      TLR_BUILD_APPS: OFF
      TLR_BUILD_EXAMPLES: OFF
      TLR_BUILD_TESTS: OFF
      TLR_BUILD_FFmpeg: OFF
      TLR_BUILD_JPEG: OFF
      TLR_BUILD_PNG: OFF
      TLR_BUILD_OpenEXR: OFF
      TLR_BUILD_TIFF: OFF

    steps:
    - uses: actions/checkout@v2

    # \bug DYLD_LIBRARY_PATH is not being set here?
    - name: Setup environment
      run: >
        echo "$PWD/build/install/bin" >> $GITHUB_PATH &&
        echo "DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV &&
        echo "PYTHONPATH=$PWD/build/install/lib:$PYTHONPATH" >> $GITHUB_ENV

    - name: Build tlRender
      run: >
        export DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH &&
        mkdir build &&
        cd build &&
        cmake ../etc/SuperBuild \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX=$PWD/install \
          -DCMAKE_PREFIX_PATH=$PWD/install \
          -DTLR_ENABLE_MMAP=$TLR_ENABLE_MMAP \
          -DTLR_ENABLE_COVERAGE=$TLR_ENABLE_COVERAGE \
          -DTLR_ENABLE_PYTHON=$TLR_ENABLE_PYTHON \
          -DTLR_BUILD_GL=$TLR_BUILD_GL \
          -DTLR_BUILD_QT=$TLR_BUILD_QT \
          -DTLR_BUILD_APPS=$TLR_BUILD_APPS \
          -DTLR_BUILD_EXAMPLES=$TLR_BUILD_EXAMPLES \
          -DTLR_BUILD_TESTS=$TLR_BUILD_TESTS \
          -DTLR_BUILD_FFmpeg=$TLR_BUILD_FFmpeg \
          -DTLR_BUILD_JPEG=$TLR_BUILD_JPEG \
          -DTLR_BUILD_PNG=$TLR_BUILD_PNG \
          -DTLR_BUILD_OpenEXR=$TLR_BUILD_OpenEXR \
          -DTLR_BUILD_TIFF=$TLR_BUILD_TIFF &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        export DYLD_LIBRARY_PATH=$PWD/build/install/lib:$DYLD_LIBRARY_PATH &&
        cd build &&
        cd tlRender/src/tlRender-build &&
        ctest --rerun-failed --output-on-failure

  windows-build:
    runs-on: windows-latest

    env:
      TLR_ENABLE_MMAP: ON
      TLR_ENABLE_COVERAGE: OFF
      TLR_ENABLE_PYTHON: OFF
      TLR_BUILD_GL: OFF
      TLR_BUILD_QT: OFF
      TLR_BUILD_APPS: OFF
      TLR_BUILD_EXAMPLES: OFF
      TLR_BUILD_TESTS: OFF
      TLR_BUILD_FFmpeg: OFF
      TLR_BUILD_JPEG: OFF
      TLR_BUILD_PNG: OFF
      TLR_BUILD_OpenEXR: OFF
      TLR_BUILD_TIFF: OFF

    steps:
    - uses: actions/checkout@v2

    - name: Setup environment
      run: >
        echo "TLR_BUILD_FFmpeg=OFF" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8 &&
        echo "$pwd\build\install\bin;$pwd\build\install\lib;$env:path" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        
    - name: Build tlRender
      run: >
        mkdir build &&
        cd build &&
        cmake ..\etc\SuperBuild `
          -DCMAKE_BUILD_TYPE=Debug `
          -DCMAKE_INSTALL_PREFIX=install `
          -DCMAKE_PREFIX_PATH=install `
          -DTLR_ENABLE_MMAP=$TLR_ENABLE_MMAP `
          -DTLR_ENABLE_COVERAGE=$TLR_ENABLE_COVERAGE `
          -DTLR_ENABLE_PYTHON=$TLR_ENABLE_PYTHON `
          -DTLR_BUILD_GL=$TLR_BUILD_GL `
          -DTLR_BUILD_QT=$TLR_BUILD_QT `
          -DTLR_BUILD_APPS=$TLR_BUILD_APPS `
          -DTLR_BUILD_EXAMPLES=$TLR_BUILD_EXAMPLES `
          -DTLR_BUILD_TESTS=$TLR_BUILD_TESTS `
          -DTLR_BUILD_FFmpeg=$TLR_BUILD_FFmpeg `
          -DTLR_BUILD_JPEG=$TLR_BUILD_JPEG `
          -DTLR_BUILD_PNG=$TLR_BUILD_PNG `
          -DTLR_BUILD_OpenEXR=$TLR_BUILD_OpenEXR `
          -DTLR_BUILD_TIFF=$TLR_BUILD_TIFF &&
        cmake --build . -j 4

    - name: Run tests
      run: >
        cd build &&
        cd tlRender\src\tlRender-build &&
        ctest --rerun-failed --output-on-failure
