cmake_minimum_required(VERSION 3.19)
cmake_policy(SET CMP0091 NEW)
cmake_policy(SET CMP0114 NEW)

project(tlRender-SuperBuild)

# Build options.
set(TLRENDER_MMAP TRUE CACHE BOOL "Enable memory-mapped file I/O")
set(TLRENDER_COVERAGE FALSE CACHE BOOL "Enable code coverage")
set(TLRENDER_PYTHON FALSE CACHE BOOL "Enable Python support (for OTIO Python adapters)")
set(TLRENDER_OCIO TRUE CACHE BOOL "Enable support for OpenColorIO")
set(TLRENDER_AUDIO TRUE CACHE BOOL "Enable support for audio")
set(TLRENDER_FREETYPE TRUE CACHE BOOL "Enable support for FreeType font rendering")
set(TLRENDER_JPEG TRUE CACHE BOOL "Enable support for JPEG")
set(TLRENDER_TIFF TRUE CACHE BOOL "Enable support for TIFF")
set(TLRENDER_PNG TRUE CACHE BOOL "Enable support for PNG")
set(TLRENDER_EXR TRUE CACHE BOOL "Enable support for OpenEXR")
set(TLRENDER_FFMPEG TRUE CACHE BOOL "Enable support for FFmpeg (see the README for how to build FFmpeg on Windows)")
set(TLRENDER_VPX TRUE CACHE BOOL "Enable support for VPX codec through FFmpeg")
set(TLRENDER_GL TRUE CACHE BOOL "Enable support for OpenGL")
set(TLRENDER_BMD FALSE CACHE BOOL "Enable support for Blackmagic Design devices")
set(TLRENDER_BMD_SDK "" CACHE PATH "Full path to the Blackmagic Design SDK")
set(TLRENDER_QT6 FALSE CACHE BOOL "Enable support for Qt6")
set(TLRENDER_QT5 FALSE CACHE BOOL "Enable support for Qt5")
set(TLRENDER_PROGRAMS TRUE CACHE BOOL "Build programs")
set(TLRENDER_EXAMPLES TRUE CACHE BOOL "Build examples")
set(TLRENDER_TESTS TRUE CACHE BOOL "Build tests")

# Configure.
list(PREPEND CMAKE_MODULE_PATH
    ${PROJECT_SOURCE_DIR}/../../cmake/Modules
    ${PROJECT_SOURCE_DIR}/cmake/Modules)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreaded$<$<CONFIG:Debug>:Debug>DLL)
set(CMAKE_FIND_FRAMEWORK LAST)

# https://stackoverflow.com/questions/45414507/pass-a-list-of-prefix-paths-to-externalproject-add-in-cmake-args
string(REPLACE ";" "|" CMAKE_PREFIX_PATH_TMP "${CMAKE_PREFIX_PATH}")

# Common arguments for building external projects.
set(TLRENDER_EXTERNAL_ARGS
    -DCMAKE_MODULE_PATH=${CMAKE_MODULE_PATH}
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}
    -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH_TMP}
    -DCMAKE_POLICY_DEFAULT_CMP0091:STRING=NEW
    -DCMAKE_POLICY_DEFAULT_CMP0114:STRING=NEW
    -DCMAKE_FIND_FRAMEWORK=${CMAKE_FIND_FRAMEWORK}
    -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
    -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
    -DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}
    -DCMAKE_MSVC_RUNTIME_LIBRARY=${CMAKE_MSVC_RUNTIME_LIBRARY}
    -DCMAKE_VERBOSE_MAKEFILE=${CMAKE_VERBOSE_MAKEFILE}
    -DCMAKE_OSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET}
    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}
    -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS})

# External dependencies.
find_package(Threads REQUIRED)
list(APPEND TLRENDER_EXTERNAL_DEPS GLM)
list(APPEND TLRENDER_EXTERNAL_DEPS Imath)
list(APPEND TLRENDER_EXTERNAL_DEPS nlohmann_json)
list(APPEND TLRENDER_EXTERNAL_DEPS OTIO)
if(TLRENDER_OCIO)
    list(APPEND TLRENDER_EXTERNAL_DEPS OCIO)
endif()
if(TLRENDER_AUDIO)
    list(APPEND TLRENDER_EXTERNAL_DEPS libsamplerate)
    list(APPEND TLRENDER_EXTERNAL_DEPS RtAudio)
endif()
if(TLRENDER_FREETYPE OR
    TLRENDER_JPEG OR
    TLRENDER_TIFF OR
    TLRENDER_PNG OR
    TLRENDER_EXR OR
    TLRENDER_FFMPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS ZLIB)
endif()
if(TLRENDER_FREETYPE)
    list(APPEND TLRENDER_EXTERNAL_DEPS FreeType)
endif()
if((TLRENDER_FFMPEG OR TLRENDER_JPEG) AND NOT WIN32)
    list(APPEND TLRENDER_EXTERNAL_DEPS NASM)
endif()
if(TLRENDER_JPEG)
    list(APPEND TLRENDER_EXTERNAL_DEPS JPEG)
endif()
if(TLRENDER_TIFF)
    list(APPEND TLRENDER_EXTERNAL_DEPS TIFF)
endif()
if(TLRENDER_PNG)
    list(APPEND TLRENDER_EXTERNAL_DEPS PNG)
endif()
if(TLRENDER_EXR)
    list(APPEND TLRENDER_EXTERNAL_DEPS OpenEXR)
endif()
if(TLRENDER_VPX AND TLRENDER_FFMPEG AND NOT WIN32)
    list(APPEND TLRENDER_EXTERNAL_DEPS YASM)
    list(APPEND TLRENDER_EXTERNAL_DEPS VPX)
endif()
if(TLRENDER_FFMPEG AND NOT WIN32)
    list(APPEND TLRENDER_EXTERNAL_DEPS FFmpeg)
endif()
if(TLRENDER_GL)
    find_package(OpenGL REQUIRED)
    if(TLRENDER_PROGRAMS OR TLRENDER_EXAMPLES)
	list(APPEND TLRENDER_EXTERNAL_DEPS GLFW)
    endif()
endif()
foreach(EXTERNAL_DEP ${TLRENDER_EXTERNAL_DEPS})
    include(Build${EXTERNAL_DEP})
endforeach()

# Build tests.
if (TLRENDER_TESTS)
    include(Buildtests)
endif()

# Build tlRender.
include(BuildtlRender)
